{"version":3,"sources":["components/NavBar.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","useState","value","style","position","height","width","background","Main","deck","setDeck","currentCard","setCurrentCard","stats","setStats","suits","values","_buildDeck","suit","i","length","k","card","push","_updateStats","Object","keys","isNaN","parseInt","useEffect","id","onClick","index","Math","floor","random","splice","_onDeckClick","class","spades","diamonds","hearts","clubs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a431170b.chunk.js","sourcesContent":["import React, {  useState } from 'react';\r\n\r\nexport default function NavBar() {\r\n    const [value] = useState('Fifty-Two With You');\r\n    // value is the variable you can use and onChangeText() can be used to update that variable.\r\n\r\n  return (\r\n    <div style={{position:'fixed', height: 20 + 'px', width: '100%', background: 'red'}}>\r\n      {value}\r\n    </div>\r\n    //This needs to be a bar thats stuck to the top of the screen. Its\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport '../style/Main.css'\r\n\r\nexport default function Main() {\r\n    const [deck, setDeck] = useState([]);\r\n    const [currentCard, setCurrentCard] = useState({ 'Jack': '0' });\r\n    const [stats, setStats] = useState({ 'spades': 0, 'diamonds': 0, 'hearts': 0, 'clubs': 0 })\r\n\r\n    const suits = ['spades', 'diamonds', 'hearts', 'clubs'];\r\n    const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\r\n\r\n    function _buildDeck() {\r\n        var deck, suit, value;\r\n\r\n        deck = [];\r\n\r\n        for (let i = 0; i < suits.length; i++) {\r\n            suit = suits[i];\r\n            for (let k = 0; k < values.length; k++) {\r\n                value = values[k];\r\n                var card = {};\r\n                card[suit] = value;\r\n                deck.push(card);\r\n            }\r\n        }\r\n\r\n        return deck;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDeck(_buildDeck());\r\n    }, []);\r\n\r\n    function _onDeckClick() {\r\n        var index;\r\n\r\n        // Add the current card to the stats\r\n\r\n        if (deck.length === 0) {\r\n            // Stop the timer\r\n            _updateStats()\r\n            return;\r\n        } else if (deck.length === 1) {\r\n            setCurrentCard(deck[0]);\r\n            _updateStats()\r\n            setDeck([])\r\n            return;\r\n        } else if (deck.length !== 52) {\r\n            _updateStats()\r\n        }\r\n        // Probably a better way to shuffle or in addition to this.\r\n        // https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\n        index = Math.floor(Math.random() * deck.length);\r\n\r\n        setCurrentCard(deck[index]);\r\n\r\n        deck.splice(index, 1)\r\n\r\n        setDeck(deck);\r\n    }\r\n\r\n    function _updateStats() {\r\n        var suit;\r\n\r\n        suit = Object.keys(currentCard)[0];\r\n\r\n        if (!isNaN(parseInt(currentCard[suit]))) {\r\n            stats[suit] += parseInt(currentCard[suit]);\r\n        }\r\n        else {\r\n            var card;\r\n\r\n            card = currentCard[suit]\r\n\r\n            switch (card) {\r\n                case 'A':\r\n                    card = 1\r\n                    break;\r\n                case 'J':\r\n                    card = 11\r\n                    break;\r\n                case 'Q':\r\n                    card = 12\r\n                    break;\r\n                case 'K':\r\n                    card = 13\r\n                    break;\r\n\r\n                default:\r\n                    card = 0\r\n                    break;\r\n            }\r\n            stats[suit] += card;\r\n        }\r\n\r\n        setStats(stats)\r\n    }\r\n\r\n    function _resetGame(){\r\n        setStats({ 'spades': 0, 'diamonds': 0, 'hearts': 0, 'clubs': 0 })\r\n        setCurrentCard({ 'Jack': '0' })\r\n        setDeck([])\r\n        setDeck(_buildDeck());\r\n    }\r\n\r\n    return (\r\n        <div id=\"game-container\">\r\n            <div id=\"deck-container\">\r\n                <div id=\"deck\" onClick={() => _onDeckClick()} class=\"card-deck\">Deck</div>\r\n            </div>\r\n\r\n            <div id=\"current-card-container\">\r\n                <div id=\"current-card\" class=\"card-deck\">\r\n                    <div>{Object.keys(currentCard)[0]}</div>\r\n                    <div>{currentCard[Object.keys(currentCard)[0]]}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"stats-container\">\r\n                <table>\r\n                    <tr>\r\n                        <th>Card</th>\r\n                        <th>Count</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Spades</td>\r\n                        <td>{stats.spades}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Diamonds</td>\r\n                        <td>{stats.diamonds}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Hearts</td>\r\n                        <td>{stats.hearts}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Clubs</td>\r\n                        <td>{stats.clubs}</td>\r\n                    </tr>\r\n                </table>\r\n                <div>Remaining cards {deck.length}</div>\r\n                <button onClick={()=>{_resetGame()}}>Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport NavBar from './components/NavBar';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n      <NavBar />\r\n      <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}